// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  superadmin
  customer
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)
  role     RoleUser @default(customer)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  logo String @db.VarChar(255)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StockProduct {
  ready
  preorder
}

model Product {
  id          Int          @id @default(autoincrement())
  brand_id    Int
  brand       Brand        @relation(fields: [brand_id], references: [id])
  category_id Int
  category    Category     @relation(fields: [category_id], references: [id])
  location_id Int
  location    Location     @relation(fields: [location_id], references: [id])
  name        String       @db.VarChar(255)
  description String       @db.Text
  price       BigInt       @db.BigInt
  stock       StockProduct @default(ready)
  image       String[]

  orders OrderProduct[] // relation one to many

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StatusOrder {
  pending
  success
  failed
}

model Order {
  id      Int         @id @default(autoincrement())
  code    String      @unique @db.Text
  user_id Int
  user    User        @relation(fields: [user_id], references: [id])
  total   BigInt      @db.BigInt
  status  StatusOrder @default(pending)

  detail   OrderDetail? // relation one to one
  products OrderProduct[] // relation one to many

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderDetail {
  id          Int     @id @default(autoincrement())
  order_id    Int     @unique // relation one to one
  order       Order   @relation(fields: [order_id], references: [id]) // relation one to one
  name        String  @db.VarChar(255)
  phone       String  @db.VarChar(255)
  address     String  @db.VarChar(255)
  city        String  @db.VarChar(255)
  postal_code String  @db.VarChar(255)
  notes       String? @db.VarChar(255) // bisa kosong

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id         Int     @id @default(autoincrement())
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])
  order_id   Int
  order      Order   @relation(fields: [order_id], references: [id])
  subtotal   BigInt  @db.BigInt
  quantity   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
